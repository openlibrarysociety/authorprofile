#!/usr/bin/perl

use strict;
use warnings;

use Data::Dumper;
use Date::Parse;
use File::Basename;
use File::Path;
use File::Slurp;
use File::Basename;
use IO::File;
use JSON::XS;
use Text::Levenshtein qw(distance);
use XML::LibXML;
use XML::LibXSLT;

use AuthorProfile::Auvert qw(normalize_name);
use AuthorProfile::Common qw( relate_name_element_to_authors
                              json_retrieve
                              json_store );
## all the configuration constants, not marked up here.
use AuthorProfile::Conf;

binmode(STDOUT,"utf8");

## basic setup of XML
my $dom=XML::LibXML->new();
my $xslt = XML::LibXSLT->new();
$dom->keep_blanks(0);

## parse stylesheet
my $style_doc = XML::LibXML->load_xml(location=>$ap_top_xsl_file,
                                      no_cdata=>1);
my $stylesheet = $xslt->parse_stylesheet($style_doc);

## the author master data structure, global variable
my $auma;

## the name variation master structure, global variable
my $navama;

## the last change for an author
my $last_change;

## the id for an author, global
my $au_id='';

# 11/24/10 17:24 EST - James
my $statuses_found;

## run parameters
my $do_create_xml_file=1;

## files to do
my $files_to_do;
my $days_too_old;

## input
my $arg=$ARGV[0] // 0;
## if this is a number
if($arg=~m|^\d+$|) {
  $days_too_old=$arg;
}
elsif(my $file=&AuthorProfile::Common::psid_to_profile_file($arg)) {
  $files_to_do->[0]=$file;
}


## An author is at a certain number in the list of aunexes of a document
## with id $doc_id. That number is her aunex number. We start the aunex numbers at 1.
## In the first parse, we need to find a structure 
## $auma->{$doc_id}->{$aunex_number}=$au_id
## and save it. If the saved files is older than a day,
## we generate it anew. 
## Then we take an XML snippet of the form, say
## <text ref="info:lib/dblp:conf/ercimdl/CruzKK00">
##   <title>Personal Data in a Large Digital Library.</title>
##   <displaypage>http://dblp.uni-trier.de/db/conf/ercimdl/ecdl2000.html#CruzKK00</displaypage>
##   <hasauthor><name>José Manuel Barrueco Cruz</name></hasauthor>
##   <hasauthor><name>Markus J. R. Klink</name></hasauthor>
##  <hasauthor><name>Thomas Krichel</name></hasauthor>
## </text>
## and change to 
## <text ref="info:lib/dblp:conf/ercimdl/CruzKK00">
##   <title>Personal Data in a Large Digital Library.</title>
##   <displaypage>http://dblp.uni-trier.de/db/conf/ercimdl/ecdl2000.html#CruzKK00</displaypage>
##   <hasauthor><name id="pba1" status="2">José Manuel Barrueco Cruz</name></hasauthor>
##   <hasauthor><name>Markus J. R. Klink</name></hasauthor>
##   <hasauthor><name id="pkr1" status="1">Thomas Krichel</name></hasauthor>
## </text>
## where status=1, means that this the author we are looking at,
## status=2 means there is a registered co-author. 

## check if auma is old,
if(defined($days_too_old) and 
   (not -f $auma_file or (-M $auma_file > $days_too_old) or 
   not -f $navama_file or (-M $navama_file > $days_too_old) or
   not -f $last_change_file or (-M $navama_file > $days_too_old))) {
  ## do all
  if(not defined($files_to_do)) {
    $files_to_do=&find_files_to_do();
  }
  &refresh_auma_and_navama_and_lasttime($files_to_do);
}
else {
  $auma=&AuthorProfile::Common::json_retrieve($auma_file);
  $navama=&AuthorProfile::Common::json_retrieve($navama_file);
  $last_change=&AuthorProfile::Common::json_retrieve($last_change_file);  
  &refresh_auma_and_navama_and_lasttime($files_to_do);
}

  
## main function
&main($files_to_do);

## build the html
sub main {
  my $files_to_do=shift;
  my $count_file=0;
  my $max_files=2000;
  foreach my $file (@$files_to_do) {
    ## remove trailing newline
    chomp $file;
    #print "DEBUG: processing file $file\n";
    $count_file++;
    ## main, second parse of the input
    &main_parse($file);
    if($count_file > $max_files) {
      print Dumper $auma;
      exit;
    }
  }
}


sub last_time {
  my $root_element=shift;
  my $author=shift;
  # Modified by James on 11/03/11
  # It's <amf><person><acis:last-change-date>
  # getElementsByTagNameNS does not recurse to the deepest nodes of the tree
  # Also, you do not need a list.  There is only one change date.
  my $last_change_element=$root_element->firstChild->getChildrenByTagNameNS($acis_ns,'last-change-date')->[0];
  
  die "FATAL ERROR: Record for $author does not contain a value for last-change-date\n" if not $last_change_element;

  my $last_change_date=$last_change_element->textContent; 
  print "DEBUG: $last_change_date for $author\n";
  my $last_change_time= str2time($last_change_date);
  return $last_change_time;
}

## main parse
sub main_parse {
  my $file=shift;
  my $doc=$dom->parse_file($file);
  my $root_element=$doc->documentElement();
  my $au_id=&get_au_id($root_element);
  ## prepare the html file name
  my $file_path=$au_id;
  $file_path=~s|^p||;
  my $new_file_path=$file_path;
  $new_file_path=~s|^([a-z])([a-z])(\d+)|$1/$2/$3|g;
  my $html_file="$html_dir/p/$new_file_path.html";
  #print "html is $html_file\n";
  my $dir=dirname($html_file);
  if(not -d $dir) {
    mkpath($dir);
  }
  my @text_elements=$root_element->getElementsByTagNameNS($amf_ns,'text');
  foreach my $text_element (@text_elements) {
    ## check that this is not a refused paper
    my $parent_element=$text_element->parentNode;
    my $node_name=$parent_element->nodeName;
    if($node_name eq 'acis:hasnoconnectionto') {
      next;
    }  
    ## assumed to be accepted
    my $doc_id=$text_element->getAttribute('ref');
    if(not $doc_id) {
      warn "fatal: no documunt id in ". $text_element->toString(1);
      next;
      # fixeme: Check to determine if the document bears the element <frozen>
    }
    ## assumed to be an author's or editor's name
    ## deal with the occasional issue of missing names
    my $aunex_number=0;
    my @name_elements=$text_element->getElementsByTagNameNS($amf_ns,'name');
    ## try not to warn twice about empty names in the same fie
    my $warned_about_empty_names;
    foreach my $name_element (@name_elements) {
      #print "Name element: ", $name_element->toString(1), "\n";
      if(not $name_element->textContent()) {
        ## warn once about empty names in a file
        ## but don't warn if the relationship is editorship 
        my $relation_element_name=$name_element->parentNode->parentNode->parentNode->parentNode->nodeName;
        if(not $warned_about_empty_names->{$file} and
           $relation_element_name ne 'iseditorof') {
          warn "Found empty <name/> element in \n'".$text_element->toString()."\n"."in file $file\n";
          $warned_about_empty_names->{$file}=1;
        }
        ## Remove the <name/> element.
        my $person_element=$name_element->parentNode;
        $person_element->removeChild($name_element);
        ## Remove the <person/> element.
        my $hasauthor_element=$person_element->parentNode;
        $hasauthor_element->removeChild($person_element);
        ## Remove the <hasauthor/> element.
        $text_element->removeChild($hasauthor_element);
        next;
      }
      $aunex_number++;
      ## $au_id is optional... 
      ## The parameters for this function are STRICTLY as follows:
      ## &relate_name_element_to_authors([NAME ELEMENT], [AUMA], [AUNEX NUMBER], [AUTHOR ID], [STATUSES FOUND], [AUNEX])      
      $name_element=AuthorProfile::Common::relate_name_element_to_authors($name_element,$auma,$aunex_number,$au_id,$statuses_found);
      #print Dumper %statuses_found;
    }
    ## create xml file if required
    ## this is debugging for Gina
    if($do_create_xml_file) {
      my $xml_file="$xml_dir/p/$new_file_path.xml";
      my $dir=dirname($xml_file);
      if(not -d $dir) {
        mkpath($dir);
      }
      $doc->toFile($xml_file,1);
    }
  }
  my $result = $stylesheet->transform($doc);
  $stylesheet->output_file($result,$html_file);
}



## find files to do
sub find_files_to_do {
  my $files;
  my $count_files=0;
  ## may be changed for debugging... 
  my $max_files=9999999999999999999;
  foreach my $file (`find $ap_dir -name '*.xml'`) {
    ## remove trailing newline
    chomp $file;
    ## I don't think we should be having this...
    ## this may lead to partial data since the
    ## matrices are not loaded
    #if(-M $file > $days_too_old) {
    #  next;
    #}
    $files->[$count_files]=$file;
    $count_files++;
    if($count_files > $max_files) {
      print Dumper $auma;
      exit;
    }
  }
  return $files;
}


## form hash of arrays of author names,
## one array per doc_id
sub get_aunexes_per_docid {
  my $root_element=shift;
  my @text_elements=$root_element->getElementsByTagNameNS($amf_ns,'text');
  my $aunex_hash;
  my $aunexes;
  foreach my $text_element (@text_elements) {
    ## check that this is not a refused paper!
    my $parent_element=$text_element->parentNode;
    my $node_name=$parent_element->nodeName;
    if($node_name eq 'acis:hasnoconnectionto') {
      next;
    }  
    ## assumed to be accepted
    my $doc_id=$text_element->getAttribute('ref');
    if(not $doc_id) {
      print "fatal: no doc_id in ". $text_element->toString(1);
      exit;
      # Check to determine if the document bears the element <frozen>
    }
    ## assumed to be an author's or editor's name
    my @name_elements=$text_element->getElementsByTagNameNS($amf_ns,'name');    
    my $count_aunex->{$doc_id}=0;
    foreach my $name_element (@name_elements) {
      if(not $name_element->textContent) {
        ## If the <name> element is empty, just skip the <name> element entirely.
        next;
      }
      my $aunex=&normalize_name($name_element->textContent);
      #print($count_aunex->{$doc_id}, "\n");
      #print($aunex);
      $aunexes->{$doc_id}->[$count_aunex->{$doc_id}++]=$aunex;
    }
  }
  return $aunexes;
}


sub get_au_id {
  my $root_element=shift;
  my @shortid_elements=$root_element->getElementsByTagNameNS($acis_ns,"shortid");
  ## there should really be only one, but
  my $shortid_element=$shortid_elements[$#shortid_elements];
  if(not $shortid_element) {
    print "FATAL ERROR: No author shortid in $root_element->toString(1)\!\n";
    exit;
  }  
  return $shortid_element->textContent();
} 


sub get_aunex_number_from_navars {
  my $navars=shift;
  my $aunexes=shift;
  ## a very large number for the minimum levenshtein
  my $min_lev_value=10000;
  my $min_lev_pos=0;
  my $count_aunex=0;
  foreach my $aunex (@$aunexes) {
    $count_aunex++;
    foreach my $navar (@$navars) {
      my $distance=distance($aunex, $navar);
      if($distance == 0) {
        ## I found the right author
        return $count_aunex;
      }
      
      if($distance < $min_lev_value) {
        $min_lev_value=$distance;
        $min_lev_pos=$count_aunex;
      }
    }
  }
  return $min_lev_pos;
}

##
sub get_norm_name_var {
  my $root_element=shift;
  my @variations_elements=$root_element->getElementsByTagNameNS("$acis_ns",'variation');
  if( not @variations_elements) {
    return;
  }
  my $navars;
  my $count_navars=0;
  foreach my $variation_element (@variations_elements) {
    my $name_string=lc($variation_element->textContent());
    $navars->[$count_navars]=$name_string;
    $count_navars++;
  }
  return $navars;
}


## finds the person's name in the profile
sub get_person_name {
  my $root_element=shift;
  my $person_element=&get_unique_child($root_element,'person',$amf_ns);
  my $name_element=&get_unique_child($person_element,'name',$amf_ns);
  return $name_element->textContent;
}

## a utility that finds the uniq child in an element
sub get_unique_child {
  my $element=shift;
  my $name=shift;
  my $ns=shift;
  my @child_elements=$element->getChildrenByTagNameNS($ns,$name)->get_nodelist;
  if( not @child_elements) {
    print "fatal: no $name element in". $element->nodeName ."\n";
    exit;
  }
  if(scalar @child_elements > 1) {
    print "fatal: more than one $name element in". $element->nodeName ."\n";
    exit;    
  }
  return $child_elements[0];
}


## refresh the datafiles, done in the
## first parse
sub refresh_auma_and_navama_and_lasttime {
  my $files_to_do=shift;
  my $last_change;
  if(scalar @$files_to_do eq 1) {
    $auma=&AuthorProfile::Common::json_retrieve($auma_file);
    $last_change=&AuthorProfile::Common::json_retrieve($last_change_file);
    $navama=&AuthorProfile::Common::json_retrieve($navama_file);
  }
  foreach my $file (@$files_to_do) {
    #print "processing file $file\n";
    my $doc=$dom->parse_file($file);
    my $root_element=$doc->documentElement();
    my $aunexes_per_docid=&get_aunexes_per_docid($root_element);
    ## if this is not defined, skip this guy, because
    ## s/he is not an author
    if(not defined($aunexes_per_docid)) {
      next;
    }
    my $name=&get_person_name($root_element);
    my $navars=&get_norm_name_var($root_element);
    $au_id=&get_au_id($root_element);
    ## find the last change time
    #$last_change->{$au_id}=&last_time($root_element,$au_id);
    #print "found name $name for $au_id\n";
    $auma->{$au_id}->{'name'}=$name;    
    foreach my $nava (@{$navars}) {
      push(@{$navama->{$nava}},$au_id);
      push(@{$auma->{$au_id}->{'nava'}},$nava);
      #print Dumper $navama;
    }    
    foreach my $doc_id (keys %$aunexes_per_docid) {
      #print "considering doc_id $doc_id\n";
      my $position=&get_aunex_number_from_navars($navars,$aunexes_per_docid->{$doc_id});
      $auma->{$doc_id}->{$position}=$au_id;
    }

  }
  &AuthorProfile::Common::json_store($auma, $auma_file);
  ## temporary: do not refresh it &AuthorProfile::Common::json_store($last_change, $last_change_file);
  &AuthorProfile::Common::json_store($navama, $navama_file);
}
