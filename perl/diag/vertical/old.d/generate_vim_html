#!/usr/bin/perl

## enforce strict pragma
use strict;
## warn about possible problem
use warnings;

use lib qw( /home/aupro/ap/perl/lib /home/aupro/usr/lib/perl );

## used modules, in alphabetical order
use BerkeleyDB;
use Data::Dumper;

use AuthorProfile::Common qw ( open_db get_from_db_json close_db );
use Mamf::Common qw(json_retrieve);
use Encode;
use JSON::XS;
use utf8;

use XML::LibXML;

binmode(STDOUT,"utf8");

my $g_home_dir=$ENV{'HOME'};
my $g_noma_db_file="$g_home_dir/ap/var/noma.db";
my $g_noma_html_dir="$g_home_dir/ap/var/.diag.d/vertical/html";
my $g_vert_stat_file="$g_home_dir/ap/var/vims.json";

if(not -f $g_noma_db_file) { die "noma database $g_noma_db_file does not exist.\n"; }

my %h_noma_db;
tie %h_noma_db, 'BerkeleyDB::Hash',
  -Filename => $g_noma_db_file,
  -Flags    => DB_CREATE
  or die $BerkeleyDB::Error;

my @noma_authors=keys %h_noma_db;

sub is_file_empty {
  my $file=shift;

  my ($fh,$data);
  open $fh, "< $file" or warn $!;
  binmode $fh;
  read $fh,$data,scalar $fh;
  close $fh;
  if($data) { return 0; }
  else { return 1; }

#print <$fh>;
#  read $fh,$data,scalar $fh; 
#  close $fh;
}

sub add_html_element {
  my $doc=shift;
  my $element_type=shift;
  my $element_class=shift;
  my $element_content=shift;
  my $root=shift;

  my $element=$doc->createElement($element_type);
  $element->setAttribute('class',$element_class);
  $element->appendText($element_content);
  $root->appendChild($element);
  
}

my $vid_metadata;

if(-s $g_vert_stat_file) { $vid_metadata=json_retrieve($g_vert_stat_file); }
#my $g_parser=XML::LibXML->new();

my $doc=XML::LibXML->createDocument( "1.0", "UTF-8" );
my $root=$doc->createElement('html');
$doc->setDocumentElement($root);

my $author_list_elem=$doc->createElement('ol');
$author_list_elem->setAttribute('class','author-list');
$root->appendChild($author_list_elem);

foreach my $noma_author (@noma_authors) {
#  print "adding entry for $noma_author...\n";
  my $author_elem=$doc->createElement('li');
  $author_elem->setAttribute('class','author-entry');
  $author_elem->appendText($noma_author);
  $root->appendChild($author_elem);

  my ($began_calc,$end_calc);

  my $noma_entry=decode_json($h_noma_db{$noma_author});
  if($noma_entry) {
    my $noma_elem=$doc->createElement('dl');
    $noma_elem->setAttribute('class','noma-entry');
    $author_elem->appendChild($noma_elem);

    foreach my $noma_field (keys %{$noma_entry}) {

      my $noma_field_elem=$doc->createElement('dt');
      $noma_field_elem->setAttribute('class','noma-field');
      $noma_field_elem->appendText($noma_field);
      $noma_elem->appendChild($noma_field_elem);

      my $noma_value_elem=$doc->createElement('dd');
      $noma_value_elem->setAttribute('class','noma-value');
      $noma_value_elem->appendText($noma_entry->{$noma_field});
      $noma_field_elem->appendChild($noma_value_elem);

      if($noma_field eq 'began_calculation') { $began_calc=$noma_entry->{$noma_field}; }
      if($noma_field eq 'ended_calculation') { $end_calc=$noma_entry->{$noma_field}; }
    }
  } else { warn "Corrupt noma entry for $noma_author"; }

  my $vid_elem=$doc->createElement('dl');
  $vid_elem->setAttribute('class','vid-metadata');
  $author_elem->appendChild($vid_elem);
    
  my $vid_status_elem=$doc->createElement('dt');
  $vid_status_elem->setAttribute('class','vid-status');
  $vid_status_elem->appendText('Vertical integration data status');
  $vid_elem->appendChild($vid_status_elem);

  my $vid_status_value_elem=$doc->createElement('dd');
  $vid_status_value_elem->setAttribute('class','vid-status');

  if($vid_metadata->{$noma_author}) {

    $vid_status_value_elem->appendText('Incomplete');
    $vid_status_elem->appendChild($vid_status_value_elem);
    
    foreach my $vid_depth (keys %{$vid_metadata->{$noma_author}}) {
      my $vid_depth_elem=$doc->createElement('dt');
      $vid_depth_elem->setAttribute('class','vid-depth');
      $vid_depth_elem->appendText('Vertical Integration  clculations failed at');
      $vid_elem->appendChild($vid_depth_elem);

      my $vid_depth_value_elem=$doc->createElement('dd');
      $vid_depth_value_elem->setAttribute('class','vid-depth');
      $vid_depth_value_elem->appendText($vid_depth);
      $vid_depth_elem->appendChild($vid_depth_value_elem);
      
      my $vid_errors_elem=$doc->createElement('ul');
      $author_elem->setAttribute('class','vid-errors');
      $vid_errors_elem->appendText('Vertical Integration  alculations returned the following errors');
      $vid_elem->appendChild($vid_errors_elem);
      
      foreach my $vid_error (keys %{$vid_metadata->{$noma_author}->{$vid_depth}}){
        my $vid_error_elem=$doc->createElement('li');
        $author_elem->setAttribute('class','vid-error');
        $vid_error_elem->appendText($vid_error);
        $vid_errors_elem->appendChild($vid_error_elem);
      }
    }
  } else {
    if((not $began_calc) or ($end_calc and ($began_calc > $end_calc))) {
      $vid_status_value_elem->appendText('Incomplete');
      $vid_status_elem->appendChild($vid_status_value_elem);
    } else {
      $vid_status_value_elem->appendText('Complete');
      $vid_status_elem->appendChild($vid_status_value_elem);
    }
  }

#  print $author_elem->toString(1),"\n";

#  print Dumper $h_noma_db{$noma_author};

  
}

my $fh;
open $fh,"> $g_noma_html_dir/vid_status.html";
binmode $fh;
$doc->toFH($fh,1);
close $fh;

#die Dumper keys %h_noma_db;

exit;


# Construct the handler-object for the BerkDB that stores the $noma values
my $g_noma_db = new BerkeleyDB::Hash
  -Filename => $g_noma_db_file,
  -Flags    => DB_CREATE
  or die $BerkeleyDB::Error;


my $sid=$ARGV[0];

if(not $sid) { $sid="pkr1"; }

$g_noma_db=&AuthorProfile::Common::open_db($g_noma_db_file);
my $noma_record=&AuthorProfile::Common::get_from_db_json($g_noma_db,$sid);
&AuthorProfile::Common::close_db($g_noma_db);

if($noma_record) { print Dumper $noma_record; }
else {
  my %h_noma_db;
  tie %h_noma_db, 'BerkeleyDB::Hash',
    -Filename => $g_noma_db_file,
      -Flags    => DB_CREATE
        or die $BerkeleyDB::Error;

  if(not keys %h_noma_db) { print "no values stored in the noma database\n"; }
  else { print keys %h_noma_db; }
}
