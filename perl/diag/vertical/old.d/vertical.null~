#!/usr/bin/perl

## enforce strict pragma
use strict;
## warn about possible problem
use warnings;

use lib qw( /home/mamf/lib/perl /home/mamf/usr/lib/perl );

## used modules, in alphabetical order
use BerkeleyDB;
use Data::Dumper;
use File::Basename;
use File::Path qw(make_path);
use AuthorProfile::Auvert qw( authorname_to_filename
                              normalize_name );
use Mamf::Common qw( mp_retrieve
                     get_root_from_file
                     mp_store
                     put_in_db_mp
                     get_from_db_mp );

use Encode;
use utf8;

binmode(STDOUT,"utf8");

# Output directory and file paths
my $g_vema_db_dir='/opt/wotan/home/mamf/opt/var/vertical';
my $g_vema_db_file='vema.db';

if(not -d $g_vema_db_dir) { die "vema database dir doesn't exist!"; }
if(not -f ($g_vema_db_dir . '/' . $g_vema_db_file)) { die "vema database file doesn't exist!"; }




# Construct the BerkDB ENV

my $g_vema_db_env;
$g_vema_db_env = new BerkeleyDB::Env
                  -Home   => $g_vema_db_dir,
                  -Flags  => DB_CREATE| DB_INIT_CDB | DB_INIT_MPOOL
  or die "cannot open database: $BerkeleyDB::Error\n";

my $g_vema_db_file_path=undef;

# Construct the handler-object for the BerkDB that stores the $vema values
my $g_vema_db = new BerkeleyDB::Hash
  -Filename => '/opt/wotan/home/mamf/opt/var/vertical/vema.db',
  -Flags    => DB_CREATE
  or die "cannot open database: $BerkeleyDB::Error\n";

if($ARGV[0]) {
  my $aunex=$ARGV[0];
  chomp $aunex;
  $aunex=decode_utf8($aunex);
  my $counter=1;

#  if($ARGV[$counter]) {

#  die $#ARGV;

  while($counter <= ($#ARGV + 1)) {
    $aunex= $aunex . ' ' . $ARGV[$counter];
    $counter++;
  }

  $aunex=normalize_name($aunex);

  print "Searching the vertical integration database $g_vema_db_file using the key $aunex...\n";
  print Dumper get_from_db_mp($g_vema_db, $aunex);
}
