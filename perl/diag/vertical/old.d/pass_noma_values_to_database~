#!/usr/bin/perl

## enforce strict pragma
use strict;
## warn about possible problem
use warnings;

use lib qw( /home/mamf/lib/perl /home/mamf/usr/lib/perl );

## used modules, in alphabetical order
use BerkeleyDB;
use Data::Dumper;

use AuthorProfile::Common qw ( open_db get_from_db_json close_db );

use Encode;
use utf8;

binmode(STDOUT,"utf8");

my $g_noma_db_file="/opt/wotan/home/mamf/opt/var/vertical/noma.db";

if(not -f $g_noma_db_file) { die "noma database $g_noma_db_file does not exist.\n"; }

# Construct the handler-object for the BerkDB that stores the $noma values
my $g_noma_db = new BerkeleyDB::Hash
  -Filename => $g_noma_db_file,
  -Flags    => DB_CREATE
  or die $BerkeleyDB::Error;


my $sid=$ARGV[0];

if (not $sid) { die; }

my $noma_key=$ARGV[1];

if (not $noma_key) { die; }

my $noma_value=$ARGV[2];

$g_noma_db=&AuthorProfile::Common::open_db($g_noma_db_file);
my $noma_record=&AuthorProfile::Common::get_from_db_json($g_noma_db,$sid);
&AuthorProfile::Common::close_db($g_noma_db);

if(not $noma_record) { die "entries do not exist for $sid within the noma\n"; }

if(not exists($noma_record->{$noma_key})) { die "$noma_key doesn't exist within the noma entry for $sid\n"; }

print "replacing the value for $noma_key for $sid...";
print "old value for $noma_key: ", $noma_record->{$noma_key}, "\n";

$noma_record->{$noma_key}=$noma_value;

print "new value for $noma_key: ", $noma_record->{$noma_key}, "\n";

print "ARE YOU SURE THAT YOU WANT TO PERFORM THIS OPERATION?\n";
<STDIN>;

$g_noma_db=&AuthorProfile::Common::open_db($g_noma_db_file);
&AuthorProfile::Common::put_in_db_json($g_noma_db,$sid,$noma_record);
&AuthorProfile::Common::close_db($g_noma_db);

$g_noma_db=&AuthorProfile::Common::open_db($g_noma_db_file);
$noma_record=&AuthorProfile::Common::get_from_db_json($g_noma_db,$sid);
&AuthorProfile::Common::close_db($g_noma_db);

if($noma_record->{$noma_key} eq $noma_value) { print "Replaced noma value successfully.\n"; }

else { die "Could not replace noma value successfully\n"; }
