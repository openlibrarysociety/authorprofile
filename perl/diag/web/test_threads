#!/usr/bin/perl

use warnings;
use strict;

use Data::Dumper;

use threads;
use threads::shared;

# Hash references MUST be initialized in this manner before being shared.
my $g_cache={};
share($g_cache);

sub start_caching {

  print("Caching thread started.\n");
  print("Thread ID: ", threads->tid(), "\n");
  $g_cache->{'CACHING'}=threads->tid();

  return 0;
}

sub check_cache {

  print("Cache-checking thread started.\n");
  print("Thread ID: ", threads->tid(), "\n");
  $g_cache->{'CHECKING'}=threads->tid();

  return 0;
}

my $caching_thr=threads->create({'scalar' => 1}, \&start_caching);

# For the sake of testing the "threads" pragma, the join() method is used here.
# Within Web.pm, the detach() method MUST, instead, be used!

$caching_thr->join();
#$caching_thr->detach();

my $cache_checking_thr=threads->create({'scalar' => 1}, \&check_cache);

# For the sake of testing the "threads" pragma, the join() method is used here.
# Within Web.pm, the detach() method MUST, instead, be used!

$cache_checking_thr->join();
#$cache_checking_thr->detach();

print Dumper $g_cache;
